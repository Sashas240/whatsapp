import os
import re
from datetime import datetime
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    ContextTypes,
    filters
)
from config import UserState
from utils import load_history, save_history, validate_russian_phone

async def check_subscription(self, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        chat_id = "-1002850457559"  # https://t.me/+0KppidSPsRFmYmUx
        chat_member = await self.app.bot.get_chat_member(chat_id, user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –∏–º–µ–µ—Ç –∑–∞—è–≤–∫—É
        status = chat_member.status
        return status in ["member", "administrator", "creator", "restricted"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def show_subscription_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    text = "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\nhttps://t.me/+0KppidSPsRFmYmUx"
    
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/+0KppidSPsRFmYmUx"),
            InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        message = await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        message = await update.message.reply_text(text, reply_markup=reply_markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_id = update.effective_user.id
    if user_id not in self.user_data:
        self.user_data[user_id] = {}
    self.user_data[user_id]['subscription_message_id'] = message.message_id

async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å–¥–∞—á–∏ WhatsApp!\nü§ñ @xvcenWhatsApp_Bot"
    
    keyboard = [
        [
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="add_phone"),
            InlineKeyboardButton("–ú–∞–Ω—É–∞–ª—ã", callback_data="manuals")
        ],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–µ", callback_data="support")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup
        )
    else:
        message = await update.message.reply_text(text, reply_markup=reply_markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    user_id = update.effective_user.id
    if user_id not in self.user_data:
        self.user_data[user_id] = {}
    self.user_data[user_id]['main_menu_message_id'] = message.message_id

async def show_manuals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ä–∞–∑–¥–µ–ª–∞ –º–∞–Ω—É–∞–ª–æ–≤"""
    text = "üìñ –ú–∞–Ω—É–∞–ª—ã:"
    
    keyboard = [
        [InlineKeyboardButton("–ö—É–¥–∞ –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —è –≤–∞–º –¥–∞–ª", callback_data="manual_code_input")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def show_code_input_manual(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –º–∞–Ω—É–∞–ª–∞ –æ –≤–≤–æ–¥–µ –∫–æ–¥–∞"""
    await update.callback_query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
    media_group = []
    for i in range(1, 6):
        photo_path = f"assets/{i}.jpg"
        with open(photo_path, 'rb') as photo_file:
            media_group.append(InputMediaPhoto(media=photo_file.read()))
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.delete_message()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = await context.bot.send_media_group(
        chat_id=update.effective_chat.id,
        media=media_group
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ user_data
    user_id = update.effective_user.id
    self.user_data[user_id]['manual_photo_ids'] = [msg.message_id for msg in messages]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="manuals")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üëÜ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –≤—ã—à–µ",
        reply_markup=reply_markup
    )

async def show_phone_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞"""
    user_id = update.effective_user.id
    self.user_states[user_id] = UserState.WAITING_FOR_PHONE
    
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –†–§, –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def show_support_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    user_id = update.effective_user.id
    self.user_states[user_id] = UserState.WAITING_FOR_SUPPORT_MESSAGE
    
    text = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ:"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    self.user_data[user_id]['support_message_id'] = message.message_id

async def process_phone_numbers(self, update: Update, context: ContextTypes.DEFAULT_TYPE, phones_text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –Ω–æ–º–µ—Ä—É
    if self.user_states.get(user_id) == UserState.WAITING_FOR_PHOTO:
        text = "‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ (–Ω–∞–∂–º–∏—Ç–µ '–í—Å—Ç–∞–ª' –∏–ª–∏ '–ù–µ –≤—Å—Ç–∞–ª')."
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)
        return
    
    phones = phones_text.strip().split('\n')
    valid_phones = []
    invalid_count = 0
    
    for phone in phones:
        phone = phone.strip()
        if phone:  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            if validate_russian_phone(phone):
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
                phone_digits = re.sub(r'\D', '', phone)
                if phone_digits.startswith('8'):
                    phone_digits = '7' + phone_digits[1:]
                valid_phones.append(phone_digits)
            else:
                invalid_count += 1
    
    if valid_phones:
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        first_phone = valid_phones[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥—å
        phone_entry = {
            'user_id': user_id,
            'username': username,
            'phone': first_phone,
            'timestamp': datetime.now(),
            'date': datetime.now().strftime('%Y-%m-%d'),
            'admin_id': None  # –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª –Ω–æ–º–µ—Ä
        }
        self.phone_queue.append(phone_entry)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await self.notify_admin_new_phone(phone_entry)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –¥–∞—Ç–æ–π –∏ —Ñ–ª–∞–≥–æ–º pending
        if self.phone_history is None:
            self.phone_history = {}
        if user_id not in self.phone_history:
            self.phone_history[user_id] = []
        phone_with_date = {
            'phone': first_phone,
            'date': datetime.now().strftime('%Y-%m-%d'),
            'datetime': datetime.now().isoformat(),
            'pending': True  # –ù–æ–º–µ—Ä –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        }
        self.phone_history[user_id].append(phone_with_date)
        save_history(self.db_file, self.phone_history)
        
        self.user_states[user_id] = UserState.WAITING_IN_QUEUE
        
        remaining_count = len(valid_phones) - 1
        if remaining_count > 0:
            text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω 1 –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥—å.\n‚ö†Ô∏è –û—Å—Ç–∞–ª—å–Ω—ã–µ {remaining_count} –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–º–æ–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É).\n–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –≤–∞—à –Ω–æ–º–µ—Ä –≤–æ–∑—å–º—É—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É."
        else:
            text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω 1 –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥—å.\n–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –≤–∞—à –Ω–æ–º–µ—Ä –≤–æ–∑—å–º—É—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É."
        
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await update.message.reply_text(text, reply_markup=reply_markup)
        self.user_data[user_id]['queue_message_id'] = message.message_id
        
    else:
        # –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        if invalid_count > 0:
            text = f"‚ùå –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å {invalid_count} –Ω–æ–º–µ—Ä{'–∞' if invalid_count > 1 else ''}"
        else:
            text = "‚ùå –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å"
        
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="add_phone")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)

async def process_support_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    user_info = f"@{username}" if username != f"user_{user_id}" else f"ID: {user_id}"
    admin_text = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {user_info}:\n\n{message_text}"
    
    keyboard = [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await self.app.bot.send_message(self.admin_ids[0], admin_text, reply_markup=reply_markup)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"
        if user_id in self.user_data and 'support_message_id' in self.user_data[user_id]:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=self.user_data[user_id]['support_message_id']
                )
            except:
                pass
            self.user_data[user_id].pop('support_message_id', None)
        
        self.user_states[user_id] = UserState.IDLE
        
        text = "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)
        
    except Exception as e:
        text = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        keyboard = [[InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="support")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id not in self.admin_ids:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    if self.processing_user is None:
        return  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    target_user_id = self.processing_user
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        message = await self.app.bot.send_photo(
            chat_id=target_user_id,
            photo=update.message.photo[-1].file_id,
            caption="üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–í—Å—Ç–∞–ª", callback_data=f"status_success_{target_user_id}"),
                    InlineKeyboardButton("–ù–µ –≤—Å—Ç–∞–ª", callback_data=f"status_failed_{target_user_id}")
                ]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
        self.user_data[target_user_id]['photo_message_id'] = message.message_id
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
        
        self.user_states[target_user_id] = UserState.WAITING_FOR_PHOTO
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
    if user_id in self.admin_ids:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user_states.get(user_id) == UserState.WAITING_FOR_ADMIN_REPLY and self.pending_admin_reply:
            target_user_id = self.pending_admin_reply
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.app.bot.send_message(
                    target_user_id,
                    f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{update.message.text}"
                )
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.pending_admin_reply = None
                self.user_states[user_id] = UserState.IDLE
                
            except Exception as e:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.")
        else:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            if self.processing_user is None:
                return
            await update.message.reply_text("üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–º–µ—Ä–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–æ–≤.")
        return
    
    # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if self.user_states.get(user_id) == UserState.WAITING_FOR_PHONE:
        await process_phone_numbers(self, update, context, update.message.text)
    elif self.user_states.get(user_id) == UserState.WAITING_FOR_SUPPORT_MESSAGE:
        await process_support_message(self, update, context, update.message.text)

async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    await query.answer()
    
    if data == "check_subscription":
        is_subscribed = await check_subscription(self, user_id)
        if is_subscribed:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            if user_id in self.user_data and 'subscription_message_id' in self.user_data[user_id]:
                try:
                    await context.bot.delete_message(
                        chat_id=query.message.chat_id,
                        message_id=self.user_data[user_id]['subscription_message_id']
                    )
                except:
                    pass
                self.user_data[user_id].pop('subscription_message_id', None)
            await show_main_menu(self, update, context)
        else:
            await show_subscription_check(self, update, context)
    
    elif data == "add_phone":
        await show_phone_input(self, update, context)
    
    elif data == "manuals":
        await show_manuals(self, update, context)
    
    elif data == "manual_code_input":
        await show_code_input_manual(self, update, context)
    
    elif data == "support":
        await show_support_input(self, update, context)
    
    elif data == "back_to_main":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–Ω—É–∞–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if user_id in self.user_data and 'manual_photo_ids' in self.user_data[user_id]:
            for message_id in self.user_data[user_id]['manual_photo_ids']:
                try:
                    await context.bot.delete_message(
                        chat_id=query.message.chat_id,
                        message_id=message_id
                    )
                except:
                    pass
            self.user_data[user_id].pop('manual_photo_ids', None)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if user_id in self.user_data:
            for key in ['support_message_id', 'subscription_message_id', 'queue_message_id']:
                if key in self.user_data[user_id]:
                    try:
                        await context.bot.delete_message(
                            chat_id=query.message.chat_id,
                            message_id=self.user_data[user_id][key]
                        )
                    except:
                        pass
                    self.user_data[user_id].pop(key, None)
        
        self.user_states[user_id] = UserState.IDLE
        await show_main_menu(self, update, context)
    
    elif data.startswith("take_phone_"):
        if user_id not in self.admin_ids:
            try:
                await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞.")
            except:
                await context.bot.send_message(query.message.chat_id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞.")
            return
        
        target_user_id = int(data.split("_")[-1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –µ—â–µ –≤ –æ—á–µ—Ä–µ–¥–∏
        phone_entry = next((entry for entry in self.phone_queue if entry['user_id'] == target_user_id), None)
        if not phone_entry:
            try:
                await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
            except:
                await context.bot.send_message(query.message.chat_id, "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–¥–º–∏–Ω–∞
        self.processing_user = target_user_id
        self.processing_admin = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª –Ω–æ–º–µ—Ä
        self.phone_queue = [entry for entry in self.phone_queue if entry['user_id'] != target_user_id]
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        await self.delete_admin_messages(target_user_id, except_admin_id=user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if target_user_id in self.user_data and 'queue_message_id' in self.user_data[target_user_id]:
                try:
                    await context.bot.delete_message(
                        chat_id=target_user_id,
                        message_id=self.user_data[target_user_id]['queue_message_id']
                    )
                except:
                    pass
                self.user_data[target_user_id].pop('queue_message_id', None)
            
            await self.app.bot.send_message(
                target_user_id,
                "üìû –í–∞—à –Ω–æ–º–µ—Ä –≤–∑—è–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥."
            )
        except:
            pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
        try:
            await query.edit_message_text(
                f"üìû –í—ã –≤–∑—è–ª–∏ –Ω–æ–º–µ—Ä: {phone_entry['phone']}\n–û—Ç: @{phone_entry['username']}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )
        except:
            await context.bot.send_message(
                query.message.chat_id,
                f"üìû –í—ã –≤–∑—è–ª–∏ –Ω–æ–º–µ—Ä: {phone_entry['phone']}\n–û—Ç: @{phone_entry['username']}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )
    
    elif data.startswith("skip_phone_"):
        if user_id not in self.admin_ids:
            try:
                await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–æ–º–µ—Ä–∞.")
            except:
                await context.bot.send_message(query.message.chat_id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–æ–º–µ—Ä–∞.")
            return
        
        target_user_id = int(data.split("_")[-1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –µ—â–µ –≤ –æ—á–µ—Ä–µ–¥–∏
        phone_entry = next((entry for entry in self.phone_queue if entry['user_id'] == target_user_id), None)
        if not phone_entry:
            try:
                await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
            except:
                await context.bot.send_message(query.message.chat_id, "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —É —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
        if target_user_id in self.admin_messages and user_id in self.admin_messages[target_user_id]:
            try:
                await self.app.bot.delete_message(
                    chat_id=user_id,
                    message_id=self.admin_messages[target_user_id][user_id]
                )
                del self.admin_messages[target_user_id][user_id]
                if not self.admin_messages[target_user_id]:
                    del self.admin_messages[target_user_id]
            except:
                pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await query.edit_message_text("‚úÖ –ù–æ–º–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω.")
        except:
            await context.bot.send_message(query.message.chat_id, "‚úÖ –ù–æ–º–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω.")
    
    elif data.startswith("status_success_") or data.startswith("status_failed_"):
        target_user_id = int(data.split("_")[-1])
        status_text = "‚úÖ –ù–æ–º–µ—Ä –≤—Å—Ç–∞–ª!" if data.startswith("status_success_") else "‚ùå –ù–æ–º–µ—Ä –Ω–µ –≤—Å—Ç–∞–ª."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if self.user_states.get(target_user_id) != UserState.WAITING_FOR_PHOTO:
            try:
                await query.edit_message_text("‚ùå –°—Ç–∞—Ç—É—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            except:
                await context.bot.send_message(query.message.chat_id, "‚ùå –°—Ç–∞—Ç—É—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é: —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ pending
        if target_user_id in self.phone_history:
            for phone_entry in self.phone_history[target_user_id]:
                if phone_entry.get('pending', False):
                    phone_entry['pending'] = False
            save_history(self.db_file, self.phone_history)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª –Ω–æ–º–µ—Ä
        username = self.user_data.get(target_user_id, {}).get('username', f'user_{target_user_id}')
        if self.processing_admin:
            try:
                await self.app.bot.send_message(
                    self.processing_admin,
                    f"–°—Ç–∞—Ç—É—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {status_text}\n–û—Ç: @{username}"
                )
            except:
                pass
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        self.processing_user = None
        self.processing_admin = None
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await query.edit_message_caption(
                caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞:\n{status_text}",
                reply_markup=None
            )
        except:
            await context.bot.send_message(
                query.message.chat_id,
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞:\n{status_text}"
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.user_states[target_user_id] = UserState.IDLE
    
    elif data.startswith("reply_"):
        if user_id not in self.admin_ids:
            try:
                await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            except:
                await context.bot.send_message(query.message.chat_id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        target_user_id = int(data.split("_")[-1])
        self.pending_admin_reply = target_user_id
        self.user_states[user_id] = UserState.WAITING_FOR_ADMIN_REPLY
        
        try:
            await query.edit_message_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        except:
            await context.bot.send_message(query.message.chat_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")

async def admin_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –ø–æ–∫–∞–∑ –≤—Å–µ—Ö —Å–¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id not in self.admin_ids:
        return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ–∞–¥–º–∏–Ω–æ–≤
    
    if not self.phone_history:
        await update.message.reply_text("üìã –ò—Å—Ç–æ—Ä–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ —Å –¥–∞—Ç–∞–º–∏, –∏—Å–∫–ª—é—á–∞—è pending
    all_phones_by_date = {}
    
    for user_id_key, phones in self.phone_history.items():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = self.user_data.get(user_id_key, {}).get('username', f'user_{user_id_key}')
        user_info = f"@{username}" if username != f"user_{user_id_key}" else f"ID: {user_id_key}"
        
        for phone_entry in phones:
            if phone_entry.get('pending', False):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                continue
            if isinstance(phone_entry, dict):
                phone = phone_entry['phone']
                date_str = phone_entry['date']
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä
                phone = phone_entry
                date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            if date_str not in all_phones_by_date:
                all_phones_by_date[date_str] = []
            
            all_phones_by_date[date_str].append({
                'phone': phone,
                'user_info': user_info
            })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç, —Å–æ—Ä—Ç–∏—Ä—É—è –¥–∞—Ç—ã
    report = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    sorted_dates = sorted(all_phones_by_date.keys(), reverse=True)
    
    for date_str in sorted_dates:
        if date_str == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            report += f"üìÖ –î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞:\n"
        else:
            try:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d.%m.%Y')
                report += f"üìÖ {formatted_date}:\n"
            except:
                report += f"üìÖ {date_str}:\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users_on_date = {}
        for entry in all_phones_by_date[date_str]:
            user_info = entry['user_info']
            if user_info not in users_on_date:
                users_on_date[user_info] = []
            users_on_date[user_info].append(entry['phone'])
        
        for user_info, phones in users_on_date.items():
            report += f"   üë§ {user_info}:\n"
            for phone in phones:
                report += f"      +{phone}\n"
            report += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        
        report += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(report) > 4000:
        parts = []
        current_part = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n\n"
        
        for date_str in sorted_dates:
            date_block = ""
            if date_str == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                date_block += f"üìÖ –î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞:\n"
            else:
                try:
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    formatted_date = date_obj.strftime('%d.%m.%Y')
                    date_block += f"üìÖ {formatted_date}:\n"
                except:
                    date_block += f"üìÖ {date_str}:\n"
            
            users_on_date = {}
            for entry in all_phones_by_date[date_str]:
                user_info = entry['user_info']
                if user_info not in users_on_date:
                    users_on_date[user_info] = []
                users_on_date[user_info].append(entry['phone'])
            
            for user_info, phones in users_on_date.items():
                date_block += f"   üë§ {user_info}:\n"
                for phone in phones:
                    date_block += f"      +{phone}\n"
                date_block += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            
            date_block += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
            
            if len(current_part + date_block) > 4000:
                parts.append(current_part)
                current_part = date_block
            else:
                current_part += date_block
        
        parts.append(current_part)
        
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(report)

async def admin_call(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /call –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id not in self.admin_ids:
        return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ–∞–¥–º–∏–Ω–æ–≤
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    message_text = ' '.join(context.args) if context.args else None
    
    if not message_text:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /call –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:"
    full_message = f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n{message_text}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ user_data
    sent_count = 0
    failed_count = 0
    for target_user_id in self.user_data.keys():
        try:
            await self.app.bot.send_message(target_user_id, full_message)
            sent_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            failed_count += 1
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    await update.message.reply_text(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )

def setup_handlers(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.group_chat_id = None
    bot.user_states = {}
    bot.user_data = {}
    bot.phone_queue = []
    bot.processing_user = None
    bot.processing_admin = None  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª –Ω–æ–º–µ—Ä
    bot.phone_history = {}
    bot.pending_admin_reply = None
    bot.db_dir = "bd"
    bot.db_file = os.path.join(bot.db_dir, "phones_history.json")
    
    if not os.path.exists(bot.db_dir):
        os.makedirs(bot.db_dir)
    
    bot.phone_history = load_history(bot.db_file)
    
    bot.app.add_handler(CommandHandler("start", lambda update, context: start(bot, update, context)))
    bot.app.add_handler(CommandHandler("check", lambda update, context: admin_check(bot, update, context)))
    bot.app.add_handler(CommandHandler("call", lambda update, context: admin_call(bot, update, context)))
    bot.app.add_handler(CallbackQueryHandler(lambda update, context: button_callback(bot, update, context)))
    bot.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: handle_text(bot, update, context)))
    bot.app.add_handler(MessageHandler(filters.PHOTO, lambda update, context: handle_photo(bot, update, context)))

async def start(bot, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
    if user_id in bot.admin_ids:
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å–¥–∞—á–∏ WhatsApp!\nü§ñ @xvcenWhatsApp_Bot\n\nüë®‚Äçüíº –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.user_states[user_id] = UserState.IDLE
    if user_id not in bot.user_data:
        bot.user_data[user_id] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    bot.user_data[user_id]['username'] = update.effective_user.username or f"user_{user_id}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    is_subscribed = await check_subscription(bot, user_id)
    
    if is_subscribed:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if user_id in bot.user_data and 'subscription_message_id' in bot.user_data[user_id]:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=bot.user_data[user_id]['subscription_message_id']
                )
            except:
                pass
            bot.user_data[user_id].pop('subscription_message_id', None)
        await show_main_menu(bot, update, context)
    else:
        await show_subscription_check(bot, update, context)