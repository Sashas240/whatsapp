import logging
import os
from config import load_environment
from handlers import setup_handlers
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application
from flask import Flask, request, jsonify

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
config = load_environment()
BOT_TOKEN = config['BOT_TOKEN']
ADMIN_IDS = config['ADMIN_IDS']
GROUP_LINK = config['GROUP_LINK']

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', 5000))

class Bot:
    def __init__(self):
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        self.token = BOT_TOKEN
        self.admin_ids = ADMIN_IDS
        self.group_link = GROUP_LINK
        
        self.app = Application.builder().token(self.token).build()
        setup_handlers(self)
        self.admin_messages = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞
        self.processing_user = None # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, —á–∏–π –Ω–æ–º–µ—Ä –∑–∞—Ä–∞–∑ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è

    async def notify_admin_new_phone(self, phone_entry: dict):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø—Ä–æ –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä"""
        user_info = f"@{phone_entry['username']}" if phone_entry['username'] != f"user_{phone_entry['user_id']}" else f"ID: {phone_entry['user_id']}"
        
        # –Ø–∫—â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è, –ø–æ–∫–∞–∑—É—î–º–æ –Ω–æ–º–µ—Ä –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        if self.processing_user is None:
            text = f"üìû –ù–æ–≤–∏–π –Ω–æ–º–µ—Ä: {phone_entry['phone']}\n–í—ñ–¥: {user_info}\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
            keyboard = [
                [
                    InlineKeyboardButton("–í–∑—è—Ç–∏", callback_data=f"take_phone_{phone_entry['user_id']}"),
                    InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip_phone_{phone_entry['user_id']}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in self.admin_ids:
                try:
                    message = await self.app.bot.send_message(admin_id, text, reply_markup=reply_markup)
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞
                    if phone_entry['user_id'] not in self.admin_messages:
                        self.admin_messages[phone_entry['user_id']] = {}
                    self.admin_messages[phone_entry['user_id']][admin_id] = message.message_id
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É {admin_id}: {e}")
        else:
            # –Ø–∫—â–æ —Ö—Ç–æ—Å—å –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è, –¥–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É –ë–ï–ó —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            return

    async def delete_admin_messages(self, user_id: int, except_admin_id: int = None):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ–º–µ—Ä —É –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤, –∫—Ä—ñ–º –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ"""
        if user_id in self.admin_messages:
            for admin_id, message_id in self.admin_messages[user_id].items():
                if admin_id != except_admin_id:
                    try:
                        await self.app.bot.delete_message(chat_id=admin_id, message_id=message_id)
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∞–¥–º—ñ–Ω–∞ {admin_id}: {e}")
            # –û—á–∏—â—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –¥–∞–Ω–æ–≥–æ user_id, –∫—Ä—ñ–º —Ç–æ–≥–æ, —Ö—Ç–æ –∑–∞–±—Ä–∞–≤
            if except_admin_id:
                self.admin_messages[user_id] = {
                    except_admin_id: self.admin_messages[user_id].get(except_admin_id)
                }
            else:
                del self.admin_messages[user_id]

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —è–∫ –≤–µ–±—Å–µ—Ä–≤—ñ—Å—É"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ webhook...")

        # –ó–∞–¥–∞—î–º–æ URL –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Telegram
        webhook_url_full = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        self.app.bot.set_webhook(url=webhook_url_full)
        logger.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ URL: {webhook_url_full}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask
        flask_app = Flask(__name__)

        @flask_app.route('/')
        def hello():
            return "Bot is running!"

        @flask_app.route(f"/{BOT_TOKEN}", methods=['POST'])
        async def webhook():
            """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –≤–µ–±—Ö—É–∫—ñ–≤"""
            update = Update.de_json(request.get_json(force=True), self.app.bot)
            await self.app.process_update(update)
            return jsonify({'status': 'ok'})

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –∑–∞–∑–Ω–∞—á–µ–Ω–æ–º—É –ø–æ—Ä—Ç—É
        flask_app.run(host="0.0.0.0", port=PORT)

def main():
    bot = Bot()
    bot.run()

if __name__ == "__main__":
    main()