import logging
import os
from config import load_environment
from handlers import setup_handlers
from telegram.ext import Application, MessageHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class Bot:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_environment()
        self.token = config['BOT_TOKEN']
        self.admin_ids = config['ADMIN_IDS']
        self.group_link = config['GROUP_LINK']
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RENDER_EXTERNAL_HOSTNAME –∏–ª–∏ fallback
        self.app_name = os.getenv('RENDER_EXTERNAL_HOSTNAME', 'whatsapp-o2pb.onrender.com')
        self.port = int(os.getenv('PORT', 10000))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if not self.token or not self.token.strip():
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π!")
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π!")
        if ":" not in self.token:
            logger.error(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOT_TOKEN: {self.token}")
            raise ValueError("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOT_TOKEN. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather.")

        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π BOT_TOKEN: {self.token[:10]}... (—Å–∫—Ä—ã—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)")
        
        self.app = Application.builder().token(self.token).build()
        setup_handlers(self)
        self.admin_messages = {}

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
        self.app.add_handler(MessageHandler(filters.Regex('^/$'), self.root_handler))

    async def root_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏"""
        logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å /")
        await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (@xvcenWhatsApp_Bot).")
        return

    async def notify_admin_new_phone(self, phone_entry: dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –Ω–æ–º–µ—Ä–µ"""
        user_info = f"@{phone_entry['username']}" if phone_entry['username'] != f"user_{phone_entry['user_id']}" else f"ID: {phone_entry['user_id']}"
        
        if self.processing_user is None:
            text = f"üìû –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {phone_entry['phone']}\n–û—Ç: {user_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard = [
                [
                    InlineKeyboardButton("–í–∑—è—Ç—å", callback_data=f"take_phone_{phone_entry['user_id']}"),
                    InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_phone_{phone_entry['user_id']}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            for admin_id in self.admin_ids:
                try:
                    message = await self.app.bot.send_message(admin_id, text, reply_markup=reply_markup)
                    if phone_entry['user_id'] not in self.admin_messages:
                        self.admin_messages[phone_entry['user_id']] = {}
                    self.admin_messages[phone_entry['user_id']][admin_id] = message.message_id
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        else:
            return

    async def delete_admin_messages(self, user_id: int, except_admin_id: int = None):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–æ–º–µ—Ä–µ —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ"""
        if user_id in self.admin_messages:
            for admin_id, message_id in self.admin_messages[user_id].items():
                if admin_id != except_admin_id:
                    try:
                        await self.app.bot.delete_message(chat_id=admin_id, message_id=message_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            if except_admin_id:
                self.admin_messages[user_id] = {
                    except_admin_id: self.admin_messages[user_id].get(except_admin_id)
                }
            else:
                del self.admin_messages[user_id]

    async def setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            webhook_url = f"https://{self.app_name}/webhook"
            logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
            await self.app.bot.set_webhook(url=webhook_url)
            logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}", exc_info=True)
            raise

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º webhook"""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook –Ω–∞ https://{self.app_name}/webhook")
            logger.info(f"–°–ª—É—à–∞–µ–º –Ω–∞ –ø–æ—Ä—Ç—É: {self.port}")
            
            self.app.run_webhook(
                listen="0.0.0.0",
                port=self.port,
                url_path="/webhook",
                webhook_url=f"https://{self.app_name}/webhook"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook: {e}", exc_info=True)
            logger.info("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling...")
            self.app.run_polling()

def main():
    bot = Bot()
    try:
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)

if __name__ == "__main__":
    main()