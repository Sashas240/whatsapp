import logging
import os
from config import load_environment
from handlers import setup_handlers
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
config = load_environment()
BOT_TOKEN = config['BOT_TOKEN']
WEBHOOK_URL = config['WEBHOOK_URL']
PORT = int(config.get('PORT', 5000))
ADMIN_IDS = config['ADMIN_IDS']
GROUP_LINK = config['GROUP_LINK']

class Bot:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.token = BOT_TOKEN
        self.admin_ids = ADMIN_IDS
        self.group_link = GROUP_LINK
        
        self.app = Application.builder().token(self.token).build()
        self.admin_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
        self.processing_user = None # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –Ω–æ–º–µ—Ä —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        setup_handlers(self)

    async def notify_admin_new_phone(self, phone_entry: dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –Ω–æ–º–µ—Ä–µ"""
        user_info = f"@{phone_entry['username']}" if phone_entry['username'] != f"user_{phone_entry['user_id']}" else f"ID: {phone_entry['user_id']}"
        
        # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if self.processing_user is None:
            text = f"üìû –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {phone_entry['phone']}\n–û—Ç: {user_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard = [
                [
                    InlineKeyboardButton("–í–∑—è—Ç—å", callback_data=f"take_phone_{phone_entry['user_id']}"),
                    InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_phone_{phone_entry['user_id']}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in self.admin_ids:
                try:
                    message = await self.app.bot.send_message(admin_id, text, reply_markup=reply_markup)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
                    if phone_entry['user_id'] not in self.admin_messages:
                        self.admin_messages[phone_entry['user_id']] = {}
                    self.admin_messages[phone_entry['user_id']][admin_id] = message.message_id
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        else:
            # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ë–ï–ó —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            return

    async def delete_admin_messages(self, user_id: int, except_admin_id: int = None):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–æ–º–µ—Ä–µ —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ"""
        if user_id in self.admin_messages:
            for admin_id, message_id in self.admin_messages[user_id].items():
                if admin_id != except_admin_id:
                    try:
                        await self.app.bot.delete_message(chat_id=admin_id, message_id=message_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–±—Ä–∞–ª
            if except_admin_id:
                self.admin_messages[user_id] = {
                    except_admin_id: self.admin_messages[user_id].get(except_admin_id)
                }
            else:
                del self.admin_messages[user_id]
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–∞–∫ –≤–µ–±—Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook...")

        # –ó–∞–¥–∞–µ–º URL –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Telegram
        webhook_url_full = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        self.app.bot.set_webhook(url=webhook_url_full)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ URL: {webhook_url_full}")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask
        flask_app = Flask(__name__)

        @flask_app.route('/')
        def hello():
            return "Bot is running!"

        @flask_app.route(f"/{BOT_TOKEN}", methods=['POST'])
        async def webhook():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤"""
            update = Update.de_json(request.get_json(force=True), self.app.bot)
            await self.app.process_update(update)
            return jsonify({'status': 'ok'})

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
        flask_app.run(host="0.0.0.0", port=PORT)

def main():
    bot = Bot()
    main_async_loop = bot.app.loop
    main_async_loop.run_until_complete(bot.run())

if __name__ == "__main__":
    main()